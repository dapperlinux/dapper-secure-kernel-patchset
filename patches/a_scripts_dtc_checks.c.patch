diff --git a/scripts/dtc/checks.c b/scripts/dtc/checks.c
index 4b72b53..1620d3f 100644
--- a/scripts/dtc/checks.c
+++ b/scripts/dtc/checks.c
@@ -243,7 +243,7 @@ ERROR(duplicate_property_names, check_duplicate_property_names, NULL);
 static void check_node_name_chars(struct check *c, struct dt_info *dti,
 				  struct node *node)
 {
-	int n = strspn(node->name, c->data);
+	size_t n = strspn(node->name, c->data);
 
 	if (n < strlen(node->name))
 		FAIL(c, dti, "Bad character '%c' in node %s",
@@ -301,7 +301,7 @@ static void check_property_name_chars(struct check *c, struct dt_info *dti,
 	struct property *prop;
 
 	for_each_property(node, prop) {
-		int n = strspn(prop->name, c->data);
+		size_t n = strspn(prop->name, c->data);
 
 		if (n < strlen(prop->name))
 			FAIL(c, dti, "Bad character '%c' in property name \"%s\", node %s",
@@ -435,7 +435,7 @@ static cell_t check_phandle_prop(struct check *c, struct dt_info *dti,
 
 	phandle = propval_cell(prop);
 
-	if ((phandle == 0) || (phandle == -1)) {
+	if ((phandle == 0) || (phandle == ~0U)) {
 		FAIL(c, dti, "%s has bad value (0x%x) in %s property",
 		     node->fullpath, phandle, prop->name);
 		return 0;
@@ -526,7 +526,7 @@ static void fixup_phandle_references(struct check *c, struct dt_info *dti,
 		cell_t phandle;
 
 		for_each_marker_of_type(m, REF_PHANDLE) {
-			assert(m->offset + sizeof(cell_t) <= prop->val.len);
+			assert(m->offset + (int)sizeof(cell_t) <= prop->val.len);
 
 			refnode = get_node_by_ref(dt, m->ref);
 			if (! refnode) {
@@ -1005,7 +1005,7 @@ static void enable_warning_error(struct check *c, bool warn, bool error)
 
 static void disable_warning_error(struct check *c, bool warn, bool error)
 {
-	int i;
+	size_t i;
 
 	/* Lowering level, also lower it for things this is the prereq
 	 * for */
@@ -1026,7 +1026,7 @@ static void disable_warning_error(struct check *c, bool warn, bool error)
 
 void parse_checks_option(bool warn, bool error, const char *arg)
 {
-	int i;
+	size_t i;
 	const char *name = arg;
 	bool enable = true;
 
@@ -1053,7 +1053,7 @@ void parse_checks_option(bool warn, bool error, const char *arg)
 
 void process_checks(bool force, struct dt_info *dti)
 {
-	int i;
+	size_t i;
 	int error = 0;
 
 	for (i = 0; i < ARRAY_SIZE(check_table); i++) {
