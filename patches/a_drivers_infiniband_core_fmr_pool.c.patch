diff --git a/drivers/infiniband/core/fmr_pool.c b/drivers/infiniband/core/fmr_pool.c
index cdbb1f1..7ed4277 100644
--- a/drivers/infiniband/core/fmr_pool.c
+++ b/drivers/infiniband/core/fmr_pool.c
@@ -99,8 +99,8 @@ struct ib_fmr_pool {
 	struct kthread_worker	  *worker;
 	struct kthread_work	  work;
 
-	atomic_t                  req_ser;
-	atomic_t                  flush_ser;
+	atomic_unchecked_t        req_ser;
+	atomic_unchecked_t        flush_ser;
 
 	wait_queue_head_t         force_wait;
 };
@@ -180,13 +180,13 @@ static void ib_fmr_cleanup_func(struct kthread_work *work)
 	struct ib_fmr_pool *pool = container_of(work, struct ib_fmr_pool, work);
 
 	ib_fmr_batch_release(pool);
-	atomic_inc(&pool->flush_ser);
+	atomic_inc_unchecked(&pool->flush_ser);
 	wake_up_interruptible(&pool->force_wait);
 
 	if (pool->flush_function)
 		pool->flush_function(pool, pool->flush_arg);
 
-	if (atomic_read(&pool->flush_ser) - atomic_read(&pool->req_ser) < 0)
+	if (atomic_read_unchecked(&pool->flush_ser) - atomic_read_unchecked(&pool->req_ser) < 0)
 		kthread_queue_work(pool->worker, &pool->work);
 }
 
@@ -252,8 +252,8 @@ struct ib_fmr_pool *ib_create_fmr_pool(struct ib_pd             *pd,
 	pool->dirty_watermark = params->dirty_watermark;
 	pool->dirty_len       = 0;
 	spin_lock_init(&pool->pool_lock);
-	atomic_set(&pool->req_ser,   0);
-	atomic_set(&pool->flush_ser, 0);
+	atomic_set_unchecked(&pool->req_ser,   0);
+	atomic_set_unchecked(&pool->flush_ser, 0);
 	init_waitqueue_head(&pool->force_wait);
 
 	pool->worker = kthread_create_worker(0, "ib_fmr(%s)", device->name);
@@ -376,11 +376,11 @@ int ib_flush_fmr_pool(struct ib_fmr_pool *pool)
 	}
 	spin_unlock_irq(&pool->pool_lock);
 
-	serial = atomic_inc_return(&pool->req_ser);
+	serial = atomic_inc_return_unchecked(&pool->req_ser);
 	kthread_queue_work(pool->worker, &pool->work);
 
 	if (wait_event_interruptible(pool->force_wait,
-				     atomic_read(&pool->flush_ser) - serial >= 0))
+				     atomic_read_unchecked(&pool->flush_ser) - serial >= 0))
 		return -EINTR;
 
 	return 0;
@@ -490,7 +490,7 @@ int ib_fmr_pool_unmap(struct ib_pool_fmr *fmr)
 		} else {
 			list_add_tail(&fmr->list, &pool->dirty_list);
 			if (++pool->dirty_len >= pool->dirty_watermark) {
-				atomic_inc(&pool->req_ser);
+				atomic_inc_unchecked(&pool->req_ser);
 				kthread_queue_work(pool->worker, &pool->work);
 			}
 		}
