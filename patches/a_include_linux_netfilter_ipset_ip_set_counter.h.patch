diff --git a/include/linux/netfilter/ipset/ip_set_counter.h b/include/linux/netfilter/ipset/ip_set_counter.h
index bb6fba4..a46f052 100644
--- a/include/linux/netfilter/ipset/ip_set_counter.h
+++ b/include/linux/netfilter/ipset/ip_set_counter.h
@@ -13,25 +13,25 @@
 static inline void
 ip_set_add_bytes(u64 bytes, struct ip_set_counter *counter)
 {
-	atomic64_add((long long)bytes, &(counter)->bytes);
+	atomic64_add_unchecked((long long)bytes, &(counter)->bytes);
 }
 
 static inline void
 ip_set_add_packets(u64 packets, struct ip_set_counter *counter)
 {
-	atomic64_add((long long)packets, &(counter)->packets);
+	atomic64_add_unchecked((long long)packets, &(counter)->packets);
 }
 
 static inline u64
 ip_set_get_bytes(const struct ip_set_counter *counter)
 {
-	return (u64)atomic64_read(&(counter)->bytes);
+	return (u64)atomic64_read_unchecked(&(counter)->bytes);
 }
 
 static inline u64
 ip_set_get_packets(const struct ip_set_counter *counter)
 {
-	return (u64)atomic64_read(&(counter)->packets);
+	return (u64)atomic64_read_unchecked(&(counter)->packets);
 }
 
 static inline void
@@ -66,9 +66,9 @@ ip_set_init_counter(struct ip_set_counter *counter,
 		    const struct ip_set_ext *ext)
 {
 	if (ext->bytes != ULLONG_MAX)
-		atomic64_set(&(counter)->bytes, (long long)(ext->bytes));
+		atomic64_set_unchecked(&(counter)->bytes, (long long)(ext->bytes));
 	if (ext->packets != ULLONG_MAX)
-		atomic64_set(&(counter)->packets, (long long)(ext->packets));
+		atomic64_set_unchecked(&(counter)->packets, (long long)(ext->packets));
 }
 
 #endif /* __KERNEL__ */
