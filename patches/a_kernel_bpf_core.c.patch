diff --git a/kernel/bpf/core.c b/kernel/bpf/core.c
index aa6d981..d5d0272 100644
--- a/kernel/bpf/core.c
+++ b/kernel/bpf/core.c
@@ -295,6 +295,8 @@ struct bpf_prog *bpf_patch_insn_single(struct bpf_prog *prog, u32 off,
 }
 
 #ifdef CONFIG_BPF_JIT
+extern long __rap_hash_call___bpf_prog_run;
+
 static __always_inline void
 bpf_get_prog_addr_region(const struct bpf_prog *prog,
 			 unsigned long *symbol_start,
@@ -508,27 +508,45 @@ bpf_jit_binary_alloc(unsigned int proglen, u8 **image_ptr,
 	 * random section of illegal instructions.
 	 */
 	size = round_up(proglen + sizeof(*hdr) + 128, PAGE_SIZE);
-	hdr = module_alloc(size);
+	hdr = module_alloc_exec(size);
 	if (hdr == NULL)
 		return NULL;
 
 	/* Fill space with illegal/arch-dep instructions. */
 	bpf_fill_ill_insns(hdr, size);
 
+	pax_open_kernel();
 	hdr->pages = size / PAGE_SIZE;
+	pax_close_kernel();
+
 	hole = min_t(unsigned int, size - (proglen + sizeof(*hdr)),
 		     PAGE_SIZE - sizeof(*hdr));
+
+#ifdef CONFIG_PAX_RAP
+	hole -= 8;
+#endif
+
 	start = (get_random_int() % hole) & ~(alignment - 1);
 
+#ifdef CONFIG_PAX_RAP
+	start += 8;
+#endif
+
 	/* Leave a random number of instructions before BPF code. */
 	*image_ptr = &hdr->image[start];
 
+#ifdef CONFIG_PAX_RAP
+	pax_open_kernel();
+	*(long *)(*image_ptr - 8) = (long)&__rap_hash_call___bpf_prog_run;
+	pax_close_kernel();
+#endif
+
 	return hdr;
 }
 
 void bpf_jit_binary_free(struct bpf_binary_header *hdr)
 {
-	module_memfree(hdr);
+	module_memfree_exec(hdr);
 }
 
 /* This symbol is only overridden by archs that have different
@@ -1220,7 +1220,7 @@ STACK_FRAME_NON_STANDARD(___bpf_prog_run); /* jump table */
 
 #define PROG_NAME(stack_size) __bpf_prog_run##stack_size
 #define DEFINE_BPF_PROG_RUN(stack_size) \
-static unsigned int PROG_NAME(stack_size)(const void *ctx, const struct bpf_insn *insn) \
+static unsigned int PROG_NAME(stack_size)(const struct sk_buff *ctx, const struct bpf_insn *insn) \
 { \
 	u64 stack[stack_size / sizeof(u64)]; \
 	u64 regs[MAX_BPF_REG]; \
