diff --git a/kernel/time/posix-timers.c b/kernel/time/posix-timers.c
index f2826c3..7e6663a 100644
--- a/kernel/time/posix-timers.c
+++ b/kernel/time/posix-timers.c
@@ -43,6 +43,7 @@
 #include <linux/hash.h>
 #include <linux/posix-clock.h>
 #include <linux/posix-timers.h>
+#include <linux/grsecurity.h>
 #include <linux/syscalls.h>
 #include <linux/wait.h>
 #include <linux/workqueue.h>
@@ -194,7 +194,7 @@ static inline void unlock_timer(struct k_itimer *timr, unsigned long flags)
 }
 
 /* Get clock_realtime */
-static int posix_clock_realtime_get(clockid_t which_clock, struct timespec64 *tp)
+static int posix_clock_realtime_get(const clockid_t which_clock, struct timespec64 *tp)
 {
 	ktime_get_real_ts64(tp);
 	return 0;
@@ -216,7 +216,7 @@ static int posix_clock_realtime_adj(const clockid_t which_clock,
 /*
  * Get monotonic time for posix timers
  */
-static int posix_ktime_get_ts(clockid_t which_clock, struct timespec64 *tp)
+static int posix_ktime_get_ts(const clockid_t which_clock, struct timespec64 *tp)
 {
 	ktime_get_ts64(tp);
 	return 0;
@@ -225,20 +225,20 @@ static int posix_ktime_get_ts(clockid_t which_clock, struct timespec64 *tp)
 /*
  * Get monotonic-raw time for posix timers
  */
-static int posix_get_monotonic_raw(clockid_t which_clock, struct timespec64 *tp)
+static int posix_get_monotonic_raw(const clockid_t which_clock, struct timespec64 *tp)
 {
 	getrawmonotonic64(tp);
 	return 0;
 }
 
 
-static int posix_get_realtime_coarse(clockid_t which_clock, struct timespec64 *tp)
+static int posix_get_realtime_coarse(const clockid_t which_clock, struct timespec64 *tp)
 {
 	*tp = current_kernel_time64();
 	return 0;
 }
 
-static int posix_get_monotonic_coarse(clockid_t which_clock,
+static int posix_get_monotonic_coarse(const clockid_t which_clock,
 						struct timespec64 *tp)
 {
 	*tp = get_monotonic_coarse64();
@@ -257,13 +257,13 @@ static int posix_get_boottime(const clockid_t which_clock, struct timespec64 *tp
 	return 0;
 }
 
-static int posix_get_tai(clockid_t which_clock, struct timespec64 *tp)
+static int posix_get_tai(const clockid_t which_clock, struct timespec64 *tp)
 {
 	timekeeping_clocktai64(tp);
 	return 0;
 }
 
-static int posix_get_hrtimer_res(clockid_t which_clock, struct timespec64 *tp)
+static int posix_get_hrtimer_res(const clockid_t which_clock, struct timespec64 *tp)
 {
 	tp->tv_sec = 0;
 	tp->tv_nsec = hrtimer_resolution;
@@ -574,7 +574,7 @@ SYSCALL_DEFINE3(timer_create, const clockid_t, which_clock,
 		timer_t __user *, created_timer_id)
 {
 	if (timer_event_spec) {
-		sigevent_t event;
+		sigevent_t event = { };
 
 		if (copy_from_user(&event, timer_event_spec, sizeof (event)))
 			return -EFAULT;
@@ -589,7 +589,7 @@ COMPAT_SYSCALL_DEFINE3(timer_create, clockid_t, which_clock,
 		       timer_t __user *, created_timer_id)
 {
 	if (timer_event_spec) {
-		sigevent_t event;
+		sigevent_t event = { };
 
 		if (get_compat_sigevent(&event, timer_event_spec))
 			return -EFAULT;
@@ -1045,6 +1045,13 @@ SYSCALL_DEFINE2(clock_settime, const clockid_t, which_clock,
 	if (get_timespec64(&new_tp, tp))
 		return -EFAULT;
 
+	/* only the CLOCK_REALTIME clock can be set, all other clocks
+	   have their clock_set fptr set to a nosettime dummy function
+	   CLOCK_REALTIME has a NULL clock_set fptr which causes it to
+	   call common_clock_set, which calls do_sys_settimeofday, which
+	   we hook
+	*/
+
 	return kc->clock_set(which_clock, &new_tp);
 }
 
@@ -1345,7 +1352,7 @@ static const struct k_clock *clockid_to_kclock(const clockid_t id)
 		return (id & CLOCKFD_MASK) == CLOCKFD ?
 			&clock_posix_dynamic : &clock_posix_cpu;
 
-	if (id >= ARRAY_SIZE(posix_clocks) || !posix_clocks[id])
+	if (id >= ARRAY_SIZE(posix_clocks) || !posix_clocks[id]|| !posix_clocks[id]->clock_getres)
 		return NULL;
 	return posix_clocks[id];
 }
